{"version":3,"sources":["screens/Search.js","screens/ViewUser.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","inputState","input","setInput","userState","setUser","setSearched","css","Text","fontSize","color","PseudoBox","Input","value","onChange","e","inputValue","target","variant","placeholder","height","rounded","Button","rightIcon","variantColor","border","onClick","getUser","ViewUser","rating","uplike","downlike","user","bg","mt","Box","as","w","name","id","axios","get","then","res","data","catch","err","post","App","useState","searched","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.97dae669.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Input, PseudoBox, Text } from \"@chakra-ui/core\";\n/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nfunction Search(props) {\n  const [input, setInput] = props.inputState;\n  const [user, setUser] = props.userState;\n  let setSearched = props.setSearched;\n  let handleChange = (e) => {\n    let inputValue = e.target.value;\n    setInput(inputValue);\n  };\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `}\n    >\n      <Text\n        fontSize=\"4rem\"\n        color=\"black\"\n        css={css`\n          padding-bottom: 2rem;\n        `}\n      >\n        Rate Your Teammates!\n      </Text>\n      <PseudoBox\n        css={css`\n          display: flex;\n          width: 35rem;\n          align-items: center;\n          height: 2rem;\n        `}\n      >\n        <Input\n          value={input}\n          onChange={handleChange}\n          variant=\"filled\"\n          placeholder=\"Teammate Name\"\n          height=\"100%\"\n          rounded=\"0px\"\n          css={css`\n            padding: 1.25rem;\n            border-top-left-radius: 10px;\n            border-bottom-left-radius: 10px;\n          `}\n        />\n        <Button\n          rightIcon=\"search-2\"\n          variantColor=\"teal\"\n          variant=\"solid\"\n          border=\"0\"\n          height=\"100%\"\n          rounded=\"0px\"\n          css={css`\n            padding: 1.4rem;\n            border-top-right-radius: 10px;\n            border-bottom-right-radius: 10px;\n          `}\n          onClick={() => props.getUser(input, setUser, setSearched)}\n        >\n          Search\n        </Button>\n      </PseudoBox>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport { Box, PseudoBox, Text } from \"@chakra-ui/core\";\n/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nexport default function ViewUser(props) {\n  let [uplike, downlike] = props.rating;\n  let [user, setUser] = props.userState;\n\n  return (\n    <PseudoBox\n      bg=\"white.400\"\n      mt=\"8\"\n      height=\"xs\"\n      css={css`\n        padding: auto;\n      `}\n    >\n      <div\n        css={css`\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          height: 100%;\n          justify-content: space-evenly;\n        `}\n      >\n        <Box\n          as=\"button\"\n          w=\"150px\"\n          css={css`\n            color: white;\n            padding: 0.3rem;\n            font-weight: bold;\n            background-color: mediumseagreen;\n            border-radius: 10px;\n            box-shadow: 0 3px #999;\n            &:hover {\n              background-color: darkgreen;\n            }\n            &:active {\n              background-color: darkgreen;\n              box-shadow: 0 2px #666;\n              transform: translateY(4px);\n            }\n            &:focus {\n              outline: 0 !important;\n            }\n          `}\n          onClick={() => uplike(user.name, setUser)}\n        >\n          {user.uplike + \" \"}Uplikes\n        </Box>\n        <Text fontSize=\"4xl\">{user.name}</Text>\n        <Box\n          as=\"button\"\n          w=\"150px\"\n          css={css`\n            color: white;\n            padding: 0.3rem;\n            font-weight: bold;\n            background-color: tomato;\n            border-radius: 10px;\n            box-shadow: 0 3px #999;\n            &:hover {\n              background-color: darkred;\n            }\n            &:active {\n              background-color: darkred;\n              box-shadow: 0 2px #666;\n              transform: translateY(4px);\n            }\n            &:focus {\n              outline: 0 !important;\n            }\n          `}\n          onClick={() => downlike(user.name, setUser)}\n        >\n          {user.downlike + \" \"}Downlikes\n        </Box>\n      </div>\n    </PseudoBox>\n  );\n}\n","import React, { useState } from \"react\";\nimport Search from \"./screens/Search\";\nimport ViewUser from \"./screens/ViewUser\";\nimport axios from \"axios\";\n\n/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nlet getUser = (id, setUser, setSearched) => {\n  if (id === \"\") {\n    return;\n  }\n  axios\n    .get(`https://rateyourteam.herokuapp.com/api/v1/user/${id}`)\n    .then((res) => {\n      setUser(res.data);\n      setSearched(true);\n    })\n    .catch((err) => {\n      axios\n        .post(`https://rateyourteam.herokuapp.com/api/v1/user`, {\n          name: id,\n          uplike: 0,\n          downlike: 0,\n        })\n        .then((res) => {\n          setUser(res.data);\n          setSearched(true);\n        });\n    });\n};\n\nlet uplike = (id, setUser) => {\n  axios\n    .get(`https://rateyourteam.herokuapp.com/api/v1/uplike/${id}`)\n    .then((res) => {\n      setUser(res.data);\n    });\n};\n\nlet downlike = (id, setUser) => {\n  axios\n    .get(`https://rateyourteam.herokuapp.com/api/v1/downlike/${id}`)\n    .then((res) => {\n      setUser(res.data);\n    });\n};\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [searched, setSearched] = useState(false);\n  const [user, setUser] = useState({});\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n      `}\n    >\n      <Search\n        inputState={[input, setInput]}\n        userState={[user, setUser]}\n        setSearched={setSearched}\n        getUser={getUser}\n      />\n      {searched && (\n        <ViewUser userState={[user, setUser]} rating={[uplike, downlike]} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}